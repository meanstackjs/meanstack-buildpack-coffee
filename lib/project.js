// Generated by CoffeeScript 1.7.1
var fs, path;

path = require('path');

fs = require('fs');

module.exports = function(projectdir, grunt, mean) {
  mean.npmtasks = ['grunt-contrib-copy', 'grunt-contrib-coffee', 'grunt-contrib-watch', 'grunt-contrib-uglify', 'grunt-contrib-clean', 'grunt-contrib-less', 'grunt-contrib-cssmin', 'grunt-contrib-htmlmin', 'grunt-coffeelint', 'grunt-text-replace', 'grunt-easyassets', 'grunt-angular-templates', 'grunt-nodemon', 'grunt-concurrent', 'grunt-vhosted'];
  mean.watch = function(grunt, mean, action, filepath, target) {
    var mapfilepath, stat;
    if (target === 'easyassets') {
      mean.config.assets = grunt.file.readJSON('assets.json');
    }
    if (target === 'server-coffee') {
      if (fs.lstatSync(filepath).isDirectory()) {
        mean.config.coffeelint.server = [];
      } else {
        mean.config.coffeelint.server = filepath;
      }
    } else if (target === 'angular-coffee') {
      mean.config.coffeelint.angular = filepath;
      mean.config.coffee['angular-development'].src = path.relative(mean.config.coffee['angular-development'].cwd, filepath);
      mean.config.copy['angular-coffee'].files[0].src = path.relative(mean.config.copy['angular-coffee'].files[0].cwd, filepath);
      mapfilepath = path.join('public/js/', path.relative('src/client/', filepath).replace('.coffee', '.js.map'));
      mean.config.replace['sourcemaps'].src = mapfilepath;
    } else if (target === 'angular-views') {
      mean.config.copy['angular-views'].files[0].src = path.relative(mean.config.copy['angular-views'].files[0].cwd, filepath);
    } else if (target === 'less') {
      mean.config.less['assets'].src = path.relative(mean.config.less['assets'].cwd, filepath);
    } else if (target === 'assets') {
      mean.config.copy['assets'].files[0].src = path.relative(mean.config.copy['assets'].files[0].cwd, filepath);
    }
    if (action === 'added' || action === 'deleted' || target === 'easyassets') {
      if (target !== 'easyassets') {
        stat = fs.statSync('assets.json');
        return fs.utimesSync('assets.json', stat.atime, new Date());
      } else {
        return fs.writeFileSync('.tmp/restart', 'restart');
      }
    }
  };
  return mean;
};
