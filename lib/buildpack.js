// Generated by CoffeeScript 1.7.1
var fs, glob, path;

path = require('path');

fs = require('fs');

glob = require('glob');

module.exports = function(projectDir, grunt, master) {
  var buildpack, name, reldir, slave;
  reldir = path.relative(__dirname, projectDir);
  if (master != null) {
    master = path.relative(projectDir, path.resolve(master));
  } else {
    master = '../..';
  }
  if (!fs.existsSync("" + projectDir + "/.tmp")) {
    fs.mkdirSync("" + projectDir + "/.tmp");
  }
  fs.writeFileSync('.tmp/reload', 'reload');
  fs.writeFileSync('.tmp/restart', 'restart');
  if (fs.existsSync("" + master + "/package.json")) {
    slave = true;
  } else {
    slave = false;
  }
  grunt.task.registerTask('restart-nodemon', 'Restarts nodemon.', function() {
    if (slave) {
      return fs.writeFileSync("" + master + "/.tmp/restart", 'restart');
    } else {
      return fs.writeFileSync('.tmp/restart', 'restart');
    }
  });
  grunt.task.registerTask('reload-browser', 'Reloads browser.', function() {
    if (slave) {
      return fs.writeFileSync("" + master + "/.tmp/reload", 'reload');
    }
  });
  grunt.task.registerTask('less-config', 'Configures less task.', function() {
    return glob('src/assets/**/*.less', {
      sync: true
    }, function(err, files) {
      var cfg, dest, file, src, _i, _len;
      if (err) {
        grunt.fail.fatal(err);
      }
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        cfg = {};
        cfg.files = {};
        src = 'public/' + buildpack.config.pkg.name + '/' + path.relative('src/assets', file);
        dest = src.replace('.less', '.css');
        cfg.files[dest] = src;
        cfg.options = {};
        cfg.options.sourceMap = true;
        cfg.options.ieCompat = true;
        cfg.options.sourceMapFilename = dest + '.map';
        cfg.options.sourceMapBasepath = '';
        cfg.options.sourceMapRootpath = '/';
        buildpack.config.less[file] = cfg;
      }
      if (files.length === 0) {
        return buildpack.config.less['empty'] = {};
      }
    });
  });
  buildpack = {};
  buildpack.npmtasks = ['grunt-contrib-copy', 'grunt-contrib-coffee', 'grunt-contrib-watch', 'grunt-contrib-uglify', 'grunt-contrib-clean', 'grunt-contrib-less', 'grunt-contrib-cssmin', 'grunt-contrib-htmlmin', 'grunt-coffeelint', 'grunt-text-replace', 'grunt-easyassets', 'grunt-angular-templates', 'grunt-nodemon', 'grunt-concurrent', 'grunt-vhosted', 'grunt-supervisor'];
  buildpack.tasks = {};
  buildpack.tasks["default"] = ['install'];
  buildpack.tasks.init = ['clean:init'];
  buildpack.tasks.develop = ['clean:build', 'less-config', 'read-assets', 'copy:assets', 'copy:server-views', 'copy:angular-views', 'less', 'coffeelint:server', 'coffee:server', 'coffeelint:angular', 'coffee:angular', 'copy:angular-coffee', 'replace', 'easyassets:parse', 'concurrent:development'];
  buildpack.tasks.debug = ['clean:build', 'less-config', 'read-assets', 'copy:assets', 'copy:server-views', 'copy:angular-views', 'less', 'coffeelint:server', 'coffee:server', 'coffeelint:angular', 'coffee:angular', 'copy:angular-coffee', 'replace', 'easyassets:parse', 'concurrent:debug'];
  buildpack.tasks.preview = ['clean:build', 'less-config', 'read-assets', 'copy:assets', 'copy:server-views', 'htmlmin', 'less', 'easyassets:version-css', 'cssmin', 'coffeelint:server', 'coffee:server', 'coffeelint:angular', 'coffee:angular', 'copy:angular-coffee', 'replace', 'ngtemplates', 'easyassets:version-js', 'uglify:production', 'easyassets:version-other', 'copy:easyassets-other', 'easyassets:replace', 'nodemon:production'];
  buildpack.tasks.install = ['vhosted', 'clean:build', 'less-config', 'read-assets', 'copy:assets', 'copy:server-views', 'htmlmin', 'less', 'easyassets:version-css', 'cssmin', 'coffeelint:server', 'coffee:server', 'coffeelint:angular', 'coffee:angular', 'copy:angular-coffee', 'replace', 'ngtemplates', 'easyassets:version-js', 'uglify:production', 'easyassets:version-other', 'copy:easyassets-other', 'easyassets:replace'];
  buildpack.build = function(config, tasks) {
    var npmtask, _i, _len, _ref;
    if (config == null) {
      config = buildpack.config;
    }
    if (tasks == null) {
      tasks = buildpack.tasks;
    }
    grunt.initConfig(buildpack.config);
    grunt.file.setBase(path.resolve(__dirname, '../'));
    _ref = buildpack.npmtasks;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      npmtask = _ref[_i];
      grunt.loadNpmTasks(npmtask);
    }
    grunt.file.setBase(projectDir);
    grunt.registerTask('read-assets', 'Loads asset config.', function() {
      return buildpack.config.assets = grunt.file.readJSON("" + projectDir + "/src/assets/assets.json");
    });
    grunt.registerTask('default', tasks["default"]);
    grunt.registerTask('init', tasks.init);
    grunt.registerTask('develop', function() {
      if (slave) {
        tasks.develop.splice(tasks.develop.indexOf('concurrent:development'), 1);
        tasks.develop.push('watch');
      }
      return grunt.task.run(tasks.develop);
    });
    grunt.registerTask('debug', tasks.debug);
    grunt.registerTask('preview', tasks.preview);
    grunt.registerTask('install', tasks.install);
    return grunt.event.on('watch', function(action, filepath, target) {
      return buildpack.watch(grunt, buildpack, action, filepath, target);
    });
  };
  buildpack.config = {
    pkg: grunt.file.readJSON('package.json'),
    concurrent: {
      'development': {
        tasks: ['nodemon:development', 'watch'],
        options: {
          logConcurrentOutput: true
        }
      },
      'debug': {
        tasks: ['nodemon:debug', 'watch'],
        options: {
          logConcurrentOutput: true
        }
      },
      'production': {
        tasks: ['nodemon:production'],
        options: {
          logConcurrentOutput: true
        }
      }
    },
    nodemon: {
      'development': {
        script: 'server.coffee',
        options: {
          watch: ['.tmp/restart'],
          delay: 0,
          cwd: projectDir,
          env: {
            NODE_ENV: 'development',
            PORT: '3000'
          },
          callback: function(nodemon) {
            return nodemon.on('log', function(event) {
              return console.log(event.colour);
            });
          }
        }
      },
      'debug': {
        script: 'server.coffee',
        options: {
          watch: ['.tmp/restart'],
          nodeArgs: ['--nodejs', '--debug'],
          delay: 0,
          cwd: projectDir,
          env: {
            NODE_ENV: 'development',
            PORT: '3000'
          },
          callback: function(nodemon) {
            return nodemon.on('log', function(event) {
              return console.log(event.colour);
            });
          }
        }
      },
      'production': {
        script: 'server.js',
        options: {
          watch: ['!'],
          delay: 0,
          cwd: projectDir,
          env: {
            NODE_ENV: 'production',
            PORT: '3000'
          }
        }
      }
    },
    watch: {
      'server-coffee': {
        files: ['src/server/**/*.coffee'],
        tasks: ['coffeelint:server', 'coffee:server', 'restart-nodemon'],
        options: {
          spawn: false,
          livereload: false
        }
      },
      'server-views': {
        files: ['src/server/**/*.*', '!src/server/**/*.coffee'],
        tasks: ['copy:server-views', 'reload-browser'],
        options: {
          spawn: false,
          livereload: !slave
        }
      },
      'angular-coffee': {
        files: ['src/client/**/*.coffee'],
        tasks: ['coffeelint:angular', 'coffee:angular', 'copy:angular-coffee', 'replace:sourcemaps', 'reload-browser'],
        options: {
          spawn: false,
          livereload: !slave
        }
      },
      'angular-views': {
        files: ['src/client/**/*.html'],
        tasks: ['copy:angular-views', 'reload-browser'],
        options: {
          spawn: false,
          livereload: !slave
        }
      },
      'less': {
        files: ['src/assets/**/*.less'],
        tasks: ['copy:assets', 'less', 'reload-browser'],
        options: {
          spawn: false,
          livereload: !slave
        }
      },
      'assets': {
        files: ['src/assets/**/*.*', '!src/assets/**/*.less', '!src/assets/assets.json'],
        tasks: ['copy:assets', 'reload-browser'],
        options: {
          spawn: false,
          livereload: !slave
        }
      },
      'easyassets': {
        files: ['src/assets/assets.json'],
        tasks: ['read-assets', 'easyassets:parse', 'restart-nodemon'],
        options: {
          spawn: false,
          livereload: false
        }
      },
      'nodemon': {
        files: ['.tmp/reload'],
        options: {
          livereload: !slave
        }
      }
    },
    coffee: {
      'server': {
        options: {
          bare: true
        },
        expand: true,
        cwd: 'src/server/',
        src: ['**/*.coffee'],
        dest: 'lib/server/',
        ext: '.js'
      },
      'angular': {
        options: {
          bare: false,
          sourceMap: true
        },
        expand: true,
        cwd: 'src/client/',
        src: ['**/*.coffee'],
        dest: 'public/<%= pkg.name %>/js/',
        ext: '.js'
      }
    },
    coffeelint: {
      options: {
        'max_line_length': {
          level: 'ignore'
        }
      },
      'server': ['src/server/**/*.coffee'],
      'angular': ['src/client/**/*.coffee']
    },
    copy: {
      'server-views': {
        files: [
          {
            expand: true,
            cwd: 'src/server/',
            src: ['**/*.*', '!**/*.coffee'],
            dest: 'lib/server/'
          }
        ]
      },
      'angular-coffee': {
        files: [
          {
            expand: true,
            cwd: 'src/client/',
            src: '**/*.coffee',
            dest: 'public/<%= pkg.name %>/js/'
          }
        ]
      },
      'angular-views': {
        files: [
          {
            expand: true,
            cwd: 'src/client/',
            src: '**/*.html',
            dest: 'public/<%= pkg.name %>/js/'
          }
        ]
      },
      'assets': {
        files: [
          {
            expand: true,
            cwd: 'src/assets/',
            src: ['**/*.*', '!assets.json'],
            dest: 'public/<%= pkg.name %>/'
          }
        ]
      },
      'easyassets-other': {
        files: '<%= assets.other %>'
      }
    },
    clean: {
      options: {
        force: true
      },
      'init': ['lib/', 'public/', '.tmp/'],
      'build': ['lib/', 'public/<%= pkg.name %>/**/*', '!public/<%= pkg.name %>/vendor/**', '!public/<%= pkg.name %>/other/**'],
      'release': ['public/<%= pkg.name %>/**/*', '!public/<%= pkg.name %>/*.*', '!public/<%= pkg.name %>/release/**', '!public/<%= pkg.name %>/vendor/**', '!public/<%= pkg.name %>/other/**']
    },
    uglify: {
      options: {
        mangle: {
          except: ['jQuery']
        }
      },
      'production': {
        options: {
          compress: {
            drop_console: true
          }
        },
        files: '<%= assets.js %>'
      }
    },
    replace: {
      'sourcemaps': {
        src: ['public/<%= pkg.name %>/js/**/*.js.map'],
        overwrite: true,
        replacements: [
          {
            from: /\s*.*?sourceRoot.*?\,/g,
            to: ''
          }
        ]
      }
    },
    less: {},
    cssmin: {
      'easyassets': {
        files: '<%= assets.css %>'
      }
    },
    htmlmin: {
      'production': {
        options: {
          collapseBooleanAttributes: true,
          collapseWhitespace: true,
          removeAttributeQuotes: true,
          removeComments: true,
          removeEmptyAttributes: true,
          removeRedundantAttributes: true,
          removeScriptTypeAttributes: true,
          removeStyleLinkTypeAttributes: true
        },
        files: [
          {
            expand: true,
            cwd: 'src/client/',
            src: '**/*.html',
            dest: 'public/<%= pkg.name %>/js/'
          }
        ]
      }
    },
    easyassets: {
      options: {
        dumpvar: 'assets'
      },
      'version-js': {
        assets: '<%= assets %>',
        parse: false,
        options: {
          version: 'js',
          hashlength: 10
        }
      },
      'version-css': {
        assets: '<%= assets %>',
        parse: false,
        options: {
          version: 'css',
          hashlength: 10
        }
      },
      'version-other': {
        assets: '<%= assets %>',
        parse: false,
        options: {
          version: 'other',
          hashlength: 10
        }
      },
      'replace': {
        assets: '<%= assets %>',
        parse: true,
        options: {
          debug: false,
          dumpfile: 'public/<%= pkg.name %>/assets.json',
          ignore: [],
          replace: [
            {
              ignore: ['public/<%= pkg.name %>/vendor/**/*'],
              src: 'other',
              dest: ['css']
            }
          ]
        }
      },
      'parse': {
        assets: '<%= assets %>',
        parse: true,
        options: {
          debug: true,
          dumpfile: 'public/<%= pkg.name %>/assets.json'
        }
      }
    },
    vhosted: {
      vhosts: {
        patterns: ['vhosts/*/package.json', 'plugins/*/package.json']
      }
    }
  };
  name = buildpack.config.pkg.name.replace('-', '.');
  buildpack.config.ngtemplates = {};
  buildpack.config.ngtemplates[name] = {};
  buildpack.config.ngtemplates[name] = {
    options: {
      prefix: 'public/<%= pkg.name %>/js/'
    },
    cwd: 'public/<%= pkg.name %>/js/',
    src: '**/*.html',
    dest: 'public/<%= pkg.name %>/js/partials.js'
  };
  buildpack.watch = function(grunt, buildpack, action, filepath, target) {
    var dest, mapfilepath, src;
    if (target === 'server-coffee') {
      if (fs.lstatSync(filepath).isDirectory()) {
        buildpack.config.coffeelint.server = [];
        buildpack.config.coffee.server = [];
      } else {
        buildpack.config.coffeelint.server = filepath;
        buildpack.config.coffee['server'].src = path.relative(buildpack.config.coffee['server'].cwd, filepath);
      }
    } else if (target === 'server-views') {
      buildpack.config.copy['server-views'].files[0].src = path.relative(buildpack.config.copy['server-views'].files[0].cwd, filepath);
    } else if (target === 'angular-coffee') {
      buildpack.config.coffeelint.angular = filepath;
      buildpack.config.coffee['angular'].src = path.relative(buildpack.config.coffee['angular'].cwd, filepath);
      buildpack.config.copy['angular-coffee'].files[0].src = path.relative(buildpack.config.copy['angular-coffee'].files[0].cwd, filepath);
      mapfilepath = path.join('public/js/', path.relative('src/client/', filepath).replace('.coffee', '.js.map'));
      buildpack.config.replace['sourcemaps'].src = mapfilepath;
    } else if (target === 'angular-views') {
      buildpack.config.copy['angular-views'].files[0].src = path.relative(buildpack.config.copy['angular-views'].files[0].cwd, filepath);
    } else if (target === 'less') {
      buildpack.config.copy['assets'].files[0].src = path.relative(buildpack.config.copy['assets'].files[0].cwd, filepath);
      src = 'public/' + buildpack.config.pkg.name + '/' + path.relative('src/assets', filepath);
      dest = src.replace('.less', '.css');
      if (buildpack.config.less['recompile'] == null) {
        buildpack.config.less = {};
        buildpack.config.less['recompile'] = {};
        buildpack.config.less['recompile'].options = {};
        buildpack.config.less['recompile'].options.sourceMap = true;
        buildpack.config.less['recompile'].options.ieCompat = true;
        buildpack.config.less['recompile'].options.sourceMapBasepath = '';
        buildpack.config.less['recompile'].options.sourceMapRootpath = '/';
      }
      buildpack.config.less['recompile'].files = {};
      buildpack.config.less['recompile'].files[dest] = src;
      buildpack.config.less['recompile'].options.sourceMapFilename = dest + '.map';
    } else if (target === 'assets') {
      buildpack.config.copy['assets'].files[0].src = path.relative(buildpack.config.copy['assets'].files[0].cwd, filepath);
    }
    if (action === 'added' || action === 'deleted') {
      return fs.writeFileSync('.tmp/restart', 'restart');
    }
  };
  return buildpack;
};
